// <auto-generated />
using AM.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AM.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250714104932_AddMassIndex")]
    partial class AddMassIndex
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AM.Domain.Enities.Geolocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeteoriteId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeteoriteId")
                        .IsUnique();

                    b.ToTable("Geolocation");
                });

            modelBuilder.Entity("AM.Domain.Enities.Meteorite", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Fall")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Mass")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecclassId")
                        .HasColumnType("int");

                    b.Property<double>("Reclat")
                        .HasColumnType("float");

                    b.Property<double>("Reclong")
                        .HasColumnType("float");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Mass");

                    b.HasIndex("Name");

                    b.HasIndex("RecclassId");

                    b.HasIndex("Year");

                    b.ToTable("Meteorites");
                });

            modelBuilder.Entity("AM.Domain.Enities.Recclass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Recclass");
                });

            modelBuilder.Entity("AM.Domain.Enities.Geolocation", b =>
                {
                    b.HasOne("AM.Domain.Enities.Meteorite", "Meteorite")
                        .WithOne("Geolocation")
                        .HasForeignKey("AM.Domain.Enities.Geolocation", "MeteoriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meteorite");
                });

            modelBuilder.Entity("AM.Domain.Enities.Meteorite", b =>
                {
                    b.HasOne("AM.Domain.Enities.Recclass", "Recclass")
                        .WithMany()
                        .HasForeignKey("RecclassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recclass");
                });

            modelBuilder.Entity("AM.Domain.Enities.Meteorite", b =>
                {
                    b.Navigation("Geolocation");
                });
#pragma warning restore 612, 618
        }
    }
}
